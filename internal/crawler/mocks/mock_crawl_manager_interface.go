// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jonesrussell/page-prowler/internal/crawler (interfaces: CrawlManagerInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	colly "github.com/gocolly/colly"
	gomock "github.com/golang/mock/gomock"
	loggo "github.com/jonesrussell/loggo"
	crawler "github.com/jonesrussell/page-prowler/internal/crawler"
)

// MockCrawlManagerInterface is a mock of CrawlManagerInterface interface.
type MockCrawlManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlManagerInterfaceMockRecorder
}

// MockCrawlManagerInterfaceMockRecorder is the mock recorder for MockCrawlManagerInterface.
type MockCrawlManagerInterfaceMockRecorder struct {
	mock *MockCrawlManagerInterface
}

// NewMockCrawlManagerInterface creates a new mock instance.
func NewMockCrawlManagerInterface(ctrl *gomock.Controller) *MockCrawlManagerInterface {
	mock := &MockCrawlManagerInterface{ctrl: ctrl}
	mock.recorder = &MockCrawlManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlManagerInterface) EXPECT() *MockCrawlManagerInterfaceMockRecorder {
	return m.recorder
}

// Crawl mocks base method.
func (m *MockCrawlManagerInterface) Crawl() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Crawl")
	ret0, _ := ret[0].(error)
	return ret0
}

// Crawl indicates an expected call of Crawl.
func (mr *MockCrawlManagerInterfaceMockRecorder) Crawl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Crawl", reflect.TypeOf((*MockCrawlManagerInterface)(nil).Crawl))
}

// CrawlURL mocks base method.
func (m *MockCrawlManagerInterface) CrawlURL(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrawlURL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrawlURL indicates an expected call of CrawlURL.
func (mr *MockCrawlManagerInterfaceMockRecorder) CrawlURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrawlURL", reflect.TypeOf((*MockCrawlManagerInterface)(nil).CrawlURL), arg0)
}

// HandleVisitError mocks base method.
func (m *MockCrawlManagerInterface) HandleVisitError(arg0 string, arg1 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleVisitError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleVisitError indicates an expected call of HandleVisitError.
func (mr *MockCrawlManagerInterfaceMockRecorder) HandleVisitError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleVisitError", reflect.TypeOf((*MockCrawlManagerInterface)(nil).HandleVisitError), arg0, arg1)
}

// Logger mocks base method.
func (m *MockCrawlManagerInterface) Logger() *loggo.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(*loggo.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockCrawlManagerInterfaceMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockCrawlManagerInterface)(nil).Logger))
}

// ProcessMatchingLink mocks base method.
func (m *MockCrawlManagerInterface) ProcessMatchingLink(arg0 string, arg1 crawler.PageData, arg2 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessMatchingLink", arg0, arg1, arg2)
}

// ProcessMatchingLink indicates an expected call of ProcessMatchingLink.
func (mr *MockCrawlManagerInterfaceMockRecorder) ProcessMatchingLink(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMatchingLink", reflect.TypeOf((*MockCrawlManagerInterface)(nil).ProcessMatchingLink), arg0, arg1, arg2)
}

// SetOptions mocks base method.
func (m *MockCrawlManagerInterface) SetOptions(arg0 *crawler.CrawlOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOptions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOptions indicates an expected call of SetOptions.
func (mr *MockCrawlManagerInterfaceMockRecorder) SetOptions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOptions", reflect.TypeOf((*MockCrawlManagerInterface)(nil).SetOptions), arg0)
}

// SetupCrawlingLogic mocks base method.
func (m *MockCrawlManagerInterface) SetupCrawlingLogic() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupCrawlingLogic")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupCrawlingLogic indicates an expected call of SetupCrawlingLogic.
func (mr *MockCrawlManagerInterfaceMockRecorder) SetupCrawlingLogic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupCrawlingLogic", reflect.TypeOf((*MockCrawlManagerInterface)(nil).SetupCrawlingLogic))
}

// SetupErrorEventHandler mocks base method.
func (m *MockCrawlManagerInterface) SetupErrorEventHandler(arg0 *colly.Collector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetupErrorEventHandler", arg0)
}

// SetupErrorEventHandler indicates an expected call of SetupErrorEventHandler.
func (mr *MockCrawlManagerInterfaceMockRecorder) SetupErrorEventHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupErrorEventHandler", reflect.TypeOf((*MockCrawlManagerInterface)(nil).SetupErrorEventHandler), arg0)
}

// SetupHTMLParsingHandler mocks base method.
func (m *MockCrawlManagerInterface) SetupHTMLParsingHandler(arg0 func(*colly.HTMLElement) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetupHTMLParsingHandler", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetupHTMLParsingHandler indicates an expected call of SetupHTMLParsingHandler.
func (mr *MockCrawlManagerInterfaceMockRecorder) SetupHTMLParsingHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetupHTMLParsingHandler", reflect.TypeOf((*MockCrawlManagerInterface)(nil).SetupHTMLParsingHandler), arg0)
}

// UpdateStats mocks base method.
func (m *MockCrawlManagerInterface) UpdateStats(arg0 *crawler.CrawlOptions, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStats", arg0, arg1)
}

// UpdateStats indicates an expected call of UpdateStats.
func (mr *MockCrawlManagerInterfaceMockRecorder) UpdateStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStats", reflect.TypeOf((*MockCrawlManagerInterface)(nil).UpdateStats), arg0, arg1)
}
