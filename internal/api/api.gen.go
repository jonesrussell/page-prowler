// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error *string `json:"error,omitempty"`
}

// Link defines model for Link.
type Link struct {
	MatchingTerms *[]string `json:"matching_terms,omitempty"`
	Url           *string   `json:"url,omitempty"`
}

// Output defines model for Output.
type Output struct {
	Links     *[]Link    `json:"links,omitempty"`
	Message   *string    `json:"message,omitempty"`
	Siteid    *string    `json:"siteid,omitempty"`
	Status    *string    `json:"status,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Task defines model for Task.
type Task struct {
	ErrMsg  *string `json:"ErrMsg,omitempty"`
	ID      *string `json:"ID,omitempty"`
	LastErr *string `json:"LastErr,omitempty"`
	Payload *string `json:"Payload,omitempty"`
	Queue   *string `json:"Queue,omitempty"`
	Retries *int    `json:"Retries,omitempty"`
	Timeout *string `json:"Timeout,omitempty"`
	Type    *string `json:"Type,omitempty"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetGetlinksParams defines parameters for GetGetlinks.
type GetGetlinksParams struct {
	// Siteid The ID of the crawl site to retrieve links for.
	Siteid string `form:"siteid" json:"siteid"`
}

// PostMatchlinksJSONBody defines parameters for PostMatchlinks.
type PostMatchlinksJSONBody struct {
	CrawlSiteID *string `json:"CrawlSiteID,omitempty"`
	Debug       *bool   `json:"Debug,omitempty"`
	MaxDepth    *int    `json:"MaxDepth,omitempty"`
	SearchTerms *string `json:"SearchTerms,omitempty"`
	URL         *string `json:"URL,omitempty"`
}

// PostMatchlinksJSONRequestBody defines body for PostMatchlinks for application/json ContentType.
type PostMatchlinksJSONRequestBody PostMatchlinksJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetGetlinks request
	GetGetlinks(ctx context.Context, params *GetGetlinksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMatchlinks request
	GetMatchlinks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMatchlinksWithBody request with any body
	PostMatchlinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMatchlinks(ctx context.Context, body PostMatchlinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMatchlinksId request
	DeleteMatchlinksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMatchlinksId request
	GetMatchlinksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetGetlinks(ctx context.Context, params *GetGetlinksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGetlinksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMatchlinks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMatchlinksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMatchlinksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMatchlinksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMatchlinks(ctx context.Context, body PostMatchlinksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMatchlinksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMatchlinksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMatchlinksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMatchlinksId(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMatchlinksIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetGetlinksRequest generates requests for GetGetlinks
func NewGetGetlinksRequest(server string, params *GetGetlinksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/getlinks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteid", runtime.ParamLocationQuery, params.Siteid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMatchlinksRequest generates requests for GetMatchlinks
func NewGetMatchlinksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/matchlinks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMatchlinksRequest calls the generic PostMatchlinks builder with application/json body
func NewPostMatchlinksRequest(server string, body PostMatchlinksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMatchlinksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMatchlinksRequestWithBody generates requests for PostMatchlinks with any type of body
func NewPostMatchlinksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/matchlinks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMatchlinksIdRequest generates requests for DeleteMatchlinksId
func NewDeleteMatchlinksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/matchlinks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMatchlinksIdRequest generates requests for GetMatchlinksId
func NewGetMatchlinksIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/matchlinks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetGetlinksWithResponse request
	GetGetlinksWithResponse(ctx context.Context, params *GetGetlinksParams, reqEditors ...RequestEditorFn) (*GetGetlinksResponse, error)

	// GetMatchlinksWithResponse request
	GetMatchlinksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMatchlinksResponse, error)

	// PostMatchlinksWithBodyWithResponse request with any body
	PostMatchlinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMatchlinksResponse, error)

	PostMatchlinksWithResponse(ctx context.Context, body PostMatchlinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMatchlinksResponse, error)

	// DeleteMatchlinksIdWithResponse request
	DeleteMatchlinksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMatchlinksIdResponse, error)

	// GetMatchlinksIdWithResponse request
	GetMatchlinksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMatchlinksIdResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)
}

type GetGetlinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Output
	JSON400      *DefaultError
	JSON500      *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetGetlinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGetlinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMatchlinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Task
	JSON400      *DefaultError
	JSON500      *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMatchlinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatchlinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMatchlinksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *DefaultError
	JSON500 *DefaultError
}

// Status returns HTTPResponse.Status
func (r PostMatchlinksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMatchlinksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMatchlinksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *DefaultError
	JSON500 *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteMatchlinksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMatchlinksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMatchlinksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
	JSON400      *DefaultError
	JSON500      *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMatchlinksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMatchlinksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetGetlinksWithResponse request returning *GetGetlinksResponse
func (c *ClientWithResponses) GetGetlinksWithResponse(ctx context.Context, params *GetGetlinksParams, reqEditors ...RequestEditorFn) (*GetGetlinksResponse, error) {
	rsp, err := c.GetGetlinks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGetlinksResponse(rsp)
}

// GetMatchlinksWithResponse request returning *GetMatchlinksResponse
func (c *ClientWithResponses) GetMatchlinksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMatchlinksResponse, error) {
	rsp, err := c.GetMatchlinks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMatchlinksResponse(rsp)
}

// PostMatchlinksWithBodyWithResponse request with arbitrary body returning *PostMatchlinksResponse
func (c *ClientWithResponses) PostMatchlinksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMatchlinksResponse, error) {
	rsp, err := c.PostMatchlinksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMatchlinksResponse(rsp)
}

func (c *ClientWithResponses) PostMatchlinksWithResponse(ctx context.Context, body PostMatchlinksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMatchlinksResponse, error) {
	rsp, err := c.PostMatchlinks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMatchlinksResponse(rsp)
}

// DeleteMatchlinksIdWithResponse request returning *DeleteMatchlinksIdResponse
func (c *ClientWithResponses) DeleteMatchlinksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteMatchlinksIdResponse, error) {
	rsp, err := c.DeleteMatchlinksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMatchlinksIdResponse(rsp)
}

// GetMatchlinksIdWithResponse request returning *GetMatchlinksIdResponse
func (c *ClientWithResponses) GetMatchlinksIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetMatchlinksIdResponse, error) {
	rsp, err := c.GetMatchlinksId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMatchlinksIdResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// ParseGetGetlinksResponse parses an HTTP response from a GetGetlinksWithResponse call
func ParseGetGetlinksResponse(rsp *http.Response) (*GetGetlinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGetlinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Output
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMatchlinksResponse parses an HTTP response from a GetMatchlinksWithResponse call
func ParseGetMatchlinksResponse(rsp *http.Response) (*GetMatchlinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMatchlinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostMatchlinksResponse parses an HTTP response from a PostMatchlinksWithResponse call
func ParsePostMatchlinksResponse(rsp *http.Response) (*PostMatchlinksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMatchlinksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteMatchlinksIdResponse parses an HTTP response from a DeleteMatchlinksIdWithResponse call
func ParseDeleteMatchlinksIdResponse(rsp *http.Response) (*DeleteMatchlinksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMatchlinksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMatchlinksIdResponse parses an HTTP response from a GetMatchlinksIdWithResponse call
func ParseGetMatchlinksIdResponse(rsp *http.Response) (*GetMatchlinksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMatchlinksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the list of links for a given siteid
	// (GET /getlinks)
	GetGetlinks(ctx echo.Context, params GetGetlinksParams) error
	// Get all matching tasks
	// (GET /matchlinks)
	GetMatchlinks(ctx echo.Context) error
	// Create a new matching task
	// (POST /matchlinks)
	PostMatchlinks(ctx echo.Context) error
	// Delete the matching task
	// (DELETE /matchlinks/{id})
	DeleteMatchlinksId(ctx echo.Context, id string) error
	// Get the details of a matching task
	// (GET /matchlinks/{id})
	GetMatchlinksId(ctx echo.Context, id string) error
	// Ping the server
	// (GET /ping)
	GetPing(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetGetlinks converts echo context to params.
func (w *ServerInterfaceWrapper) GetGetlinks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGetlinksParams
	// ------------- Required query parameter "siteid" -------------

	err = runtime.BindQueryParameter("form", true, true, "siteid", ctx.QueryParams(), &params.Siteid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGetlinks(ctx, params)
	return err
}

// GetMatchlinks converts echo context to params.
func (w *ServerInterfaceWrapper) GetMatchlinks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMatchlinks(ctx)
	return err
}

// PostMatchlinks converts echo context to params.
func (w *ServerInterfaceWrapper) PostMatchlinks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostMatchlinks(ctx)
	return err
}

// DeleteMatchlinksId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMatchlinksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMatchlinksId(ctx, id)
	return err
}

// GetMatchlinksId converts echo context to params.
func (w *ServerInterfaceWrapper) GetMatchlinksId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMatchlinksId(ctx, id)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/getlinks", wrapper.GetGetlinks)
	router.GET(baseURL+"/matchlinks", wrapper.GetMatchlinks)
	router.POST(baseURL+"/matchlinks", wrapper.PostMatchlinks)
	router.DELETE(baseURL+"/matchlinks/:id", wrapper.DeleteMatchlinksId)
	router.GET(baseURL+"/matchlinks/:id", wrapper.GetMatchlinksId)
	router.GET(baseURL+"/ping", wrapper.GetPing)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXXW/bNhT9KwS3R81y2u5FT+vqovCQYF6SPQ3FwFDXEhOKVC4vnRqB//tA0h+RpST2",
	"sjV5k0jx3I9zeK59z6VtWmvAkOPFPUdwrTUO4ssE5sJr+oxoMbxLawgMhUfRtlpJQcqa/NpZE9acrKER",
	"4elHhDkv+A/5DjxPuy6PaOfrMHy1WmW8BCdRtQGMF/yjYd7AtxYkQckgfM6slB4RyhEP36+hQqQuWnHP",
	"W7QtIKlUAWxSp2ULvOCOUJkqgqxX7NU1SOKrjJ8qc9NHaATJWpnqbwJs4ooiSA97mFtIgSiW4d2jPjD2",
	"755aT/3oWpmbbtCnWhsrGMijAedEBYM5O0WgyuEtEuQfqVQ14Eg0bdidW2wE8YKXguCnsMWzQ4q+FG6g",
	"4Z8Rz1w1GHU6GVw+FS5odHBvJpbaiuH6/vDgh5tyDoTrdNZ7yhBUgDFt1YBNZO0q9xjvQr/wjF/GhQNk",
	"EJaUmdvNVRMyBoFGKM0Lfm0NOPTOgdYf3v1SheWRtA3PuBFNADpPm+y38GWiiXTYmIkK2AztnQZkH2dT",
	"nvEFoEv37WQ0Ho3D17YFI1rFC/4+LmW8FVTHLuQV0FaLFcS8urf2slaOBR5jHxjGDi7AMaqBaeWI2TmL",
	"EGxukQlWqQUYluQ34jF6OjstecG/AH3ZhAx5oGiAAB0v/upHBjadBPgQSqK40xGWkd2msYscQqlw7NYD",
	"Lne9W9+DjCPceoVQ8oLQQ/bA1fYJ/Jp17fLdePyfueTaEAbs8TRWsimsZM5LCc7Nvdbxsn9IWQyBb7PN",
	"O86+yvjPxx8KBuGbRuAy0XUQ0fFYHj31X8pJaM02nsxIuBs3KJ6zXYgXsnSQ80Yr6zlvn7yzTuY7Fl+V",
	"uH5LA3Jr3fO8SARBgRVm4K4L0qdlZt0+L7ceHP1qy+VRlHQHxqdw4y8UwSPjYQJX/uE8ubJWgzBh60x8",
	"m0BL9bDRX4BAWV9u5n4P+M/z04N9vesqq54mT17QgMfH+3AuT0hyTejr6fFTjD+kp33ryO9VuUoC1UDw",
	"rFTTZ2kedYA7NjWd9HU7iSd3yp2Wx42kbjSy61S2kyhM2d0g+s5D6P+TUqry9aSUaOszELCP/wlTAgml",
	"XeBUHKmfzjh6sXg2ab0N+Tw/FJ+TyduYgU9TnLynDS078AeLrEHeOKYSiQ5wAciUY75lwpQMvTHKVINa",
	"mYUwb+hWXzxIfq9zs9igbYHpdHpOyo7/gHlN1Loiz7WVQtfWUfF+PB7nixO++rr6JwAA///G6gQJghAA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
