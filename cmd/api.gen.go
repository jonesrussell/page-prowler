// Package cmd provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package cmd

import (
	"github.com/labstack/echo/v4"
)

// PostArticlesStartJSONBody defines parameters for PostArticlesStart.
type PostArticlesStartJSONBody struct {
	CrawlSiteID *string `json:"CrawlSiteID,omitempty"`
	Debug       *bool   `json:"Debug,omitempty"`
	MaxDepth    *int    `json:"MaxDepth,omitempty"`
	SearchTerms *string `json:"SearchTerms,omitempty"`
	URL         *string `json:"URL,omitempty"`
}

// PostArticlesStartJSONRequestBody defines body for PostArticlesStart for application/json ContentType.
type PostArticlesStartJSONRequestBody PostArticlesStartJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Start the matching process
	// (POST /articles/start)
	PostArticlesStart(ctx echo.Context) error
	// Ping the server
	// (GET /ping)
	GetPing(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostArticlesStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostArticlesStart(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostArticlesStart(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/articles/start", wrapper.PostArticlesStart)
	router.GET(baseURL+"/ping", wrapper.GetPing)

}
