// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/crawler/collector.go
//
// Generated by this command:
//
//	mockgen -source=./internal/crawler/collector.go -destination=./mocks/collector_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	colly "github.com/gocolly/colly"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectorInterface is a mock of CollectorInterface interface.
type MockCollectorInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorInterfaceMockRecorder
}

// MockCollectorInterfaceMockRecorder is the mock recorder for MockCollectorInterface.
type MockCollectorInterfaceMockRecorder struct {
	mock *MockCollectorInterface
}

// NewMockCollectorInterface creates a new mock instance.
func NewMockCollectorInterface(ctrl *gomock.Controller) *MockCollectorInterface {
	mock := &MockCollectorInterface{ctrl: ctrl}
	mock.recorder = &MockCollectorInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectorInterface) EXPECT() *MockCollectorInterfaceMockRecorder {
	return m.recorder
}

// AllowURLRevisit mocks base method.
func (m *MockCollectorInterface) AllowURLRevisit() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowURLRevisit")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowURLRevisit indicates an expected call of AllowURLRevisit.
func (mr *MockCollectorInterfaceMockRecorder) AllowURLRevisit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowURLRevisit", reflect.TypeOf((*MockCollectorInterface)(nil).AllowURLRevisit))
}

// GetUnderlyingCollector mocks base method.
func (m *MockCollectorInterface) GetUnderlyingCollector() *colly.Collector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnderlyingCollector")
	ret0, _ := ret[0].(*colly.Collector)
	return ret0
}

// GetUnderlyingCollector indicates an expected call of GetUnderlyingCollector.
func (mr *MockCollectorInterfaceMockRecorder) GetUnderlyingCollector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderlyingCollector", reflect.TypeOf((*MockCollectorInterface)(nil).GetUnderlyingCollector))
}

// IgnoreRobotsTxt mocks base method.
func (m *MockCollectorInterface) IgnoreRobotsTxt() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IgnoreRobotsTxt")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IgnoreRobotsTxt indicates an expected call of IgnoreRobotsTxt.
func (mr *MockCollectorInterfaceMockRecorder) IgnoreRobotsTxt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreRobotsTxt", reflect.TypeOf((*MockCollectorInterface)(nil).IgnoreRobotsTxt))
}

// Limit mocks base method.
func (m *MockCollectorInterface) Limit(limitRule colly.LimitRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", limitRule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockCollectorInterfaceMockRecorder) Limit(limitRule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockCollectorInterface)(nil).Limit), limitRule)
}

// OnError mocks base method.
func (m *MockCollectorInterface) OnError(arg0 func(*colly.Response, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", arg0)
}

// OnError indicates an expected call of OnError.
func (mr *MockCollectorInterfaceMockRecorder) OnError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockCollectorInterface)(nil).OnError), arg0)
}

// OnHTML mocks base method.
func (m *MockCollectorInterface) OnHTML(selector string, cb func(*colly.HTMLElement)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnHTML", selector, cb)
}

// OnHTML indicates an expected call of OnHTML.
func (mr *MockCollectorInterfaceMockRecorder) OnHTML(selector, cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnHTML", reflect.TypeOf((*MockCollectorInterface)(nil).OnHTML), selector, cb)
}

// OnScraped mocks base method.
func (m *MockCollectorInterface) OnScraped(callback func(*colly.Response)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnScraped", callback)
}

// OnScraped indicates an expected call of OnScraped.
func (mr *MockCollectorInterfaceMockRecorder) OnScraped(callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnScraped", reflect.TypeOf((*MockCollectorInterface)(nil).OnScraped), callback)
}

// SetAllowURLRevisit mocks base method.
func (m *MockCollectorInterface) SetAllowURLRevisit(allow bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAllowURLRevisit", allow)
}

// SetAllowURLRevisit indicates an expected call of SetAllowURLRevisit.
func (mr *MockCollectorInterfaceMockRecorder) SetAllowURLRevisit(allow any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllowURLRevisit", reflect.TypeOf((*MockCollectorInterface)(nil).SetAllowURLRevisit), allow)
}

// SetAllowedDomains mocks base method.
func (m *MockCollectorInterface) SetAllowedDomains(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAllowedDomains", arg0)
}

// SetAllowedDomains indicates an expected call of SetAllowedDomains.
func (mr *MockCollectorInterfaceMockRecorder) SetAllowedDomains(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllowedDomains", reflect.TypeOf((*MockCollectorInterface)(nil).SetAllowedDomains), arg0)
}

// SetIgnoreRobotsTxt mocks base method.
func (m *MockCollectorInterface) SetIgnoreRobotsTxt(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetIgnoreRobotsTxt", arg0)
}

// SetIgnoreRobotsTxt indicates an expected call of SetIgnoreRobotsTxt.
func (mr *MockCollectorInterfaceMockRecorder) SetIgnoreRobotsTxt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIgnoreRobotsTxt", reflect.TypeOf((*MockCollectorInterface)(nil).SetIgnoreRobotsTxt), arg0)
}

// Visit mocks base method.
func (m *MockCollectorInterface) Visit(URL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", URL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Visit indicates an expected call of Visit.
func (mr *MockCollectorInterfaceMockRecorder) Visit(URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockCollectorInterface)(nil).Visit), URL)
}

// Wait mocks base method.
func (m *MockCollectorInterface) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockCollectorInterfaceMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCollectorInterface)(nil).Wait))
}
