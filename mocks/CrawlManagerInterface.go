// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	colly "github.com/gocolly/colly"

	crawler "github.com/jonesrussell/page-prowler/internal/crawler"

	logger "github.com/jonesrussell/page-prowler/internal/logger"

	mock "github.com/stretchr/testify/mock"
)

// CrawlManagerInterface is an autogenerated mock type for the CrawlManagerInterface type
type CrawlManagerInterface struct {
	mock.Mock
}

// Crawl provides a mock function with given fields: ctx, url, searchTerms, crawlSiteID, maxDepth, debug
func (_m *CrawlManagerInterface) Crawl(ctx context.Context, url string, searchTerms string, crawlSiteID string, maxDepth int, debug bool) ([]crawler.PageData, error) {
	ret := _m.Called(ctx, url, searchTerms, crawlSiteID, maxDepth, debug)

	if len(ret) == 0 {
		panic("no return value specified for Crawl")
	}

	var r0 []crawler.PageData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, bool) ([]crawler.PageData, error)); ok {
		return rf(ctx, url, searchTerms, crawlSiteID, maxDepth, debug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, bool) []crawler.PageData); ok {
		r0 = rf(ctx, url, searchTerms, crawlSiteID, maxDepth, debug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crawler.PageData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int, bool) error); ok {
		r1 = rf(ctx, url, searchTerms, crawlSiteID, maxDepth, debug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CrawlURL provides a mock function with given fields: url
func (_m *CrawlManagerInterface) CrawlURL(url string) error {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for CrawlURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleVisitError provides a mock function with given fields: url, err
func (_m *CrawlManagerInterface) HandleVisitError(url string, err error) error {
	ret := _m.Called(url, err)

	if len(ret) == 0 {
		panic("no return value specified for HandleVisitError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, error) error); ok {
		r0 = rf(url, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logger provides a mock function with given fields:
func (_m *CrawlManagerInterface) Logger() logger.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func() logger.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// ProcessMatchingLink provides a mock function with given fields: options, currentURL, pageData, matchingTerms
func (_m *CrawlManagerInterface) ProcessMatchingLink(options *crawler.CrawlOptions, currentURL string, pageData crawler.PageData, matchingTerms []string) {
	_m.Called(options, currentURL, pageData, matchingTerms)
}

// SetupCrawlingLogic provides a mock function with given fields: _a0
func (_m *CrawlManagerInterface) SetupCrawlingLogic(_a0 *crawler.CrawlOptions) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetupCrawlingLogic")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*crawler.CrawlOptions) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupErrorEventHandler provides a mock function with given fields: collector
func (_m *CrawlManagerInterface) SetupErrorEventHandler(collector *colly.Collector) {
	_m.Called(collector)
}

// SetupHTMLParsingHandler provides a mock function with given fields: handler
func (_m *CrawlManagerInterface) SetupHTMLParsingHandler(handler func(*colly.HTMLElement)) error {
	ret := _m.Called(handler)

	if len(ret) == 0 {
		panic("no return value specified for SetupHTMLParsingHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*colly.HTMLElement)) error); ok {
		r0 = rf(handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStats provides a mock function with given fields: options, matchingTerms
func (_m *CrawlManagerInterface) UpdateStats(options *crawler.CrawlOptions, matchingTerms []string) {
	_m.Called(options, matchingTerms)
}

// NewCrawlManagerInterface creates a new instance of CrawlManagerInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrawlManagerInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CrawlManagerInterface {
	mock := &CrawlManagerInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
